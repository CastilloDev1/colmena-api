// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  patientId   String   @id @default(uuid()) @unique
  id          String   @db.VarChar(20) @unique
  firstName   String   @db.VarChar(90)
  lastName    String   @db.VarChar(90)
  email       String   @db.VarChar(200)
  phone       String   @db.VarChar(20)
  address     String   @db.VarChar(200)
  city        String   @db.VarChar(90)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
}

model Doctor {
  doctorId            String   @id @default(uuid()) @unique
  id                  String   @db.VarChar(20) @unique
  firstName           String   @db.VarChar(90)
  lastName            String   @db.VarChar(90)
  email               String   @db.VarChar(200)
  phone               String   @db.VarChar(20)
  address             String   @db.VarChar(200)
  city                String   @db.VarChar(90)
  businessCard        String   @db.VarChar(50)
  dateOfAdmission     DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  appointments Appointment[]
}

enum AppointmentStatus {
  SCHEDULED
  ATTENDED
  MISSED
}

model Appointment {
  id          String            @id @default(uuid())
  date        DateTime
  status      AppointmentStatus @default(SCHEDULED)

  patient     Patient          @relation(fields: [patientId], references: [patientId])
  patientId   String

  doctor      Doctor            @relation(fields: [doctorId], references: [doctorId])
  doctorId    String

  medicalOrders MedicalOrder[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          ?
}

model MedicalOrder {
  id              String       @id @default(uuid())
  description     String
  specialty       String
  expirationDate  DateTime?

  appointment     Appointment  @relation(fields: [appointmentId], references: [id])
  appointmentId   String

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}
